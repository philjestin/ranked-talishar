// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: refresh_tokens.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT into refresh_tokens(
    user_id,
    refresh_token,
    expiry
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, refresh_token, expiry
`

type CreateRefreshTokenParams struct {
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	Expiry       time.Time `json:"expiry"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.queryRow(ctx, q.createRefreshTokenStmt, createRefreshToken, arg.UserID, arg.RefreshToken, arg.Expiry)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.Expiry,
	)
	return i, err
}

const getRefreshTokenByUserID = `-- name: GetRefreshTokenByUserID :one
SELECT id, user_id, refresh_token, expiry FROM refresh_tokens
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.queryRow(ctx, q.getRefreshTokenByUserIDStmt, getRefreshTokenByUserID, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.Expiry,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
UPDATE refresh_tokens
SET
refresh_token = coalesce($1, refresh_token),
expiry = coalesce($2, expiry)
WHERE id = $3
returning id, user_id, refresh_token, expiry
`

type UpdateRefreshTokenParams struct {
	RefreshToken sql.NullString `json:"refresh_token"`
	Expiry       sql.NullTime   `json:"expiry"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) (RefreshToken, error) {
	row := q.queryRow(ctx, q.updateRefreshTokenStmt, updateRefreshToken, arg.RefreshToken, arg.Expiry, arg.ID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.Expiry,
	)
	return i, err
}
