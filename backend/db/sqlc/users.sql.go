// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    user_name,
    user_email,
    created_at,
    updated_at,
    hashed_password
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING user_id, user_name, user_email, created_at, updated_at, wins, losses, ties, elo, hashed_password, password_changed_at
`

type CreateUserParams struct {
	UserName       string    `json:"user_name"`
	UserEmail      string    `json:"user_email"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.UserName,
		arg.UserEmail,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserEmail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wins,
		&i.Losses,
		&i.Ties,
		&i.Elo,
		&i.HashedPassword,
		&i.PasswordChangedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, user_email, created_at, updated_at, wins, losses, ties, elo, hashed_password, password_changed_at FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, userName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserEmail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wins,
		&i.Losses,
		&i.Ties,
		&i.Elo,
		&i.HashedPassword,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, user_name, user_email, created_at, updated_at, wins, losses, ties, elo, hashed_password, password_changed_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserEmail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wins,
		&i.Losses,
		&i.Ties,
		&i.Elo,
		&i.HashedPassword,
		&i.PasswordChangedAt,
	)
	return i, err
}

const incrementLosses = `-- name: IncrementLosses :exec
UPDATE users
SET
losses = coalesce($1, losses + 1)
WHERE user_id = $2
`

type IncrementLossesParams struct {
	Losses sql.NullInt32 `json:"losses"`
	UserID uuid.UUID     `json:"user_id"`
}

func (q *Queries) IncrementLosses(ctx context.Context, arg IncrementLossesParams) error {
	_, err := q.exec(ctx, q.incrementLossesStmt, incrementLosses, arg.Losses, arg.UserID)
	return err
}

const incrementWins = `-- name: IncrementWins :exec
UPDATE users
SET
wins = coalesce($1, wins + 1)
WHERE user_id = $2
`

type IncrementWinsParams struct {
	Wins   sql.NullInt32 `json:"wins"`
	UserID uuid.UUID     `json:"user_id"`
}

func (q *Queries) IncrementWins(ctx context.Context, arg IncrementWinsParams) error {
	_, err := q.exec(ctx, q.incrementWinsStmt, incrementWins, arg.Wins, arg.UserID)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_name, user_email, created_at, updated_at, wins, losses, ties, elo, hashed_password, password_changed_at FROM users
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.UserEmail,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Wins,
			&i.Losses,
			&i.Ties,
			&i.Elo,
			&i.HashedPassword,
			&i.PasswordChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayerRating = `-- name: UpdatePlayerRating :exec
UPDATE users
SET
elo = COALESCE($1, elo)
where user_id = $2
`

type UpdatePlayerRatingParams struct {
	Elo    sql.NullInt32 `json:"elo"`
	UserID uuid.NullUUID `json:"user_id"`
}

func (q *Queries) UpdatePlayerRating(ctx context.Context, arg UpdatePlayerRatingParams) error {
	_, err := q.exec(ctx, q.updatePlayerRatingStmt, updatePlayerRating, arg.Elo, arg.UserID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
user_name = coalesce($1, user_name),
user_email = coalesce($2, user_email),
updated_at = coalesce($3, updated_at),
hashed_password = COALESCE($4, hashed_password),
password_changed_at = COALESCE($5, password_changed_at)
WHERE user_id = $6
RETURNING user_id, user_name, user_email, created_at, updated_at, wins, losses, ties, elo, hashed_password, password_changed_at
`

type UpdateUserParams struct {
	UserName          sql.NullString `json:"user_name"`
	UserEmail         sql.NullString `json:"user_email"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	UserID            uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.UserName,
		arg.UserEmail,
		arg.UpdatedAt,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserEmail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wins,
		&i.Losses,
		&i.Ties,
		&i.Elo,
		&i.HashedPassword,
		&i.PasswordChangedAt,
	)
	return i, err
}
