// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: formats.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFormat = `-- name: CreateFormat :one
INSERT INTO formats(
    format_name,
    format_description,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4
) RETURNING format_id, format_name, format_description, created_at, updated_at
`

type CreateFormatParams struct {
	FormatName        string    `json:"format_name"`
	FormatDescription string    `json:"format_description"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateFormat(ctx context.Context, arg CreateFormatParams) (Format, error) {
	row := q.queryRow(ctx, q.createFormatStmt, createFormat,
		arg.FormatName,
		arg.FormatDescription,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Format
	err := row.Scan(
		&i.FormatID,
		&i.FormatName,
		&i.FormatDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFormat = `-- name: DeleteFormat :exec
DELETE FROM formats
WHERE format_id = $1
`

func (q *Queries) DeleteFormat(ctx context.Context, formatID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteFormatStmt, deleteFormat, formatID)
	return err
}

const getFormatById = `-- name: GetFormatById :one
SELECT format_id, format_name, format_description, created_at, updated_at FROM formats
WHERE format_id = $1 LIMIT 1
`

func (q *Queries) GetFormatById(ctx context.Context, formatID uuid.UUID) (Format, error) {
	row := q.queryRow(ctx, q.getFormatByIdStmt, getFormatById, formatID)
	var i Format
	err := row.Scan(
		&i.FormatID,
		&i.FormatName,
		&i.FormatDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFormats = `-- name: ListFormats :many
SELECT format_id, format_name, format_description, created_at, updated_at FROM formats
ORDER BY format_id
LIMIT $1
OFFSET $2
`

type ListFormatsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFormats(ctx context.Context, arg ListFormatsParams) ([]Format, error) {
	rows, err := q.query(ctx, q.listFormatsStmt, listFormats, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Format{}
	for rows.Next() {
		var i Format
		if err := rows.Scan(
			&i.FormatID,
			&i.FormatName,
			&i.FormatDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFormat = `-- name: UpdateFormat :one
UPDATE formats
SET
format_name = coalesce($1, format_name),
format_description = coalesce($2, format_description),
updated_at = coalesce($3, updated_at)
WHERE format_id = $4
RETURNING format_id, format_name, format_description, created_at, updated_at
`

type UpdateFormatParams struct {
	FormatName        sql.NullString `json:"format_name"`
	FormatDescription sql.NullString `json:"format_description"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	FormatID          uuid.UUID      `json:"format_id"`
}

func (q *Queries) UpdateFormat(ctx context.Context, arg UpdateFormatParams) (Format, error) {
	row := q.queryRow(ctx, q.updateFormatStmt, updateFormat,
		arg.FormatName,
		arg.FormatDescription,
		arg.UpdatedAt,
		arg.FormatID,
	)
	var i Format
	err := row.Scan(
		&i.FormatID,
		&i.FormatName,
		&i.FormatDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
