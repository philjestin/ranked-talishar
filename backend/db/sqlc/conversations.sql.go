// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: conversations.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addParticipant = `-- name: AddParticipant :exec
INSERT INTO participants (conversation_id, user_id, joined_at)
VALUES ($1, $2, NOW())
`

type AddParticipantParams struct {
	ConversationID sql.NullInt32 `json:"conversation_id"`
	UserID         uuid.NullUUID `json:"user_id"`
}

func (q *Queries) AddParticipant(ctx context.Context, arg AddParticipantParams) error {
	_, err := q.exec(ctx, q.addParticipantStmt, addParticipant, arg.ConversationID, arg.UserID)
	return err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (created_at)
VALUES(NOW())
RETURNING id, created_at
`

type CreateConversationRow struct {
	ID        int32        `json:"id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateConversation(ctx context.Context) (CreateConversationRow, error) {
	row := q.queryRow(ctx, q.createConversationStmt, createConversation)
	var i CreateConversationRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
