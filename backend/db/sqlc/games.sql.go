// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: games.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games(
  game_name
) VALUES (
  $1
) RETURNING game_id, game_name
`

func (q *Queries) CreateGame(ctx context.Context, gameName string) (Game, error) {
	row := q.queryRow(ctx, q.createGameStmt, createGame, gameName)
	var i Game
	err := row.Scan(&i.GameID, &i.GameName)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE game_id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, gameID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteGameStmt, deleteGame, gameID)
	return err
}

const getGameByID = `-- name: GetGameByID :one
SELECT game_id, game_name FROM games
WHERE game_id = $1 LIMIT 1
`

func (q *Queries) GetGameByID(ctx context.Context, gameID uuid.UUID) (Game, error) {
	row := q.queryRow(ctx, q.getGameByIDStmt, getGameByID, gameID)
	var i Game
	err := row.Scan(&i.GameID, &i.GameName)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT game_id, game_name FROM games
ORDER BY game_id
LIMIT $1
OFFSET $2
`

type ListGamesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGames(ctx context.Context, arg ListGamesParams) ([]Game, error) {
	rows, err := q.query(ctx, q.listGamesStmt, listGames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Game{}
	for rows.Next() {
		var i Game
		if err := rows.Scan(&i.GameID, &i.GameName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :one
UPDATE games
SET
game_name = COALESCE($1, game_name)
WHERE game_id = $2
RETURNING game_id, game_name
`

type UpdateGameParams struct {
	GameName sql.NullString `json:"game_name"`
	GameID   uuid.UUID      `json:"game_id"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.queryRow(ctx, q.updateGameStmt, updateGame, arg.GameName, arg.GameID)
	var i Game
	err := row.Scan(&i.GameID, &i.GameName)
	return i, err
}
