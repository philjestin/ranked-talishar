// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permissions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addPermissionForUser = `-- name: AddPermissionForUser :exec
INSERT INTO users_permissions (user_id, permission_id)
SELECT $1, permissions.id FROM permissions where permissions.code = ANY($2)
`

type AddPermissionForUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Code   string    `json:"code"`
}

func (q *Queries) AddPermissionForUser(ctx context.Context, arg AddPermissionForUserParams) error {
	_, err := q.exec(ctx, q.addPermissionForUserStmt, addPermissionForUser, arg.UserID, arg.Code)
	return err
}

const getAllPermissionsForUser = `-- name: GetAllPermissionsForUser :many
SELECT permissions.code
FROM permissions
INNER JOIN users_permissions ON users_permissions.permission_id = permissions.id
INNER JOIN users on users_permissions.user_id = users.user_id
WHERE users.user_id = $1
`

func (q *Queries) GetAllPermissionsForUser(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.query(ctx, q.getAllPermissionsForUserStmt, getAllPermissionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
